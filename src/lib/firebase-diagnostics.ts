// FirebaseÈÖçÁΩÆËØäÊñ≠Â∑•ÂÖ∑

export interface FirebaseDiagnostics {
  isConfigValid: boolean
  missingVars: string[]
  configValues: Record<string, string | undefined>
  recommendations: string[]
}

export function diagnoseFirebaseConfig(): FirebaseDiagnostics {
  const requiredVars = [
    'NEXT_PUBLIC_FIREBASE_API_KEY',
    'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',
    'NEXT_PUBLIC_FIREBASE_PROJECT_ID',
    'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',
    'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID',
    'NEXT_PUBLIC_FIREBASE_APP_ID'
  ]

  const configValues: Record<string, string | undefined> = {}
  const missingVars: string[] = []
  const recommendations: string[] = []

  // Ê£ÄÊü•ÊØè‰∏™ÁéØÂ¢ÉÂèòÈáè
  requiredVars.forEach(varName => {
    const value = process.env[varName]
    configValues[varName] = value
    
    if (!value) {
      missingVars.push(varName)
    }
  })

  // ÁîüÊàêÂª∫ËÆÆ
  if (missingVars.length > 0) {
    recommendations.push('Âú®.env.localÊñá‰ª∂‰∏≠ËÆæÁΩÆÁº∫Â§±ÁöÑÁéØÂ¢ÉÂèòÈáè')
    recommendations.push('Á°Æ‰øùÁéØÂ¢ÉÂèòÈáèÂêç‰ª•NEXT_PUBLIC_ÂºÄÂ§¥')
    recommendations.push('ÈáçÂêØÂºÄÂèëÊúçÂä°Âô®‰ª•Âä†ËΩΩÊñ∞ÁöÑÁéØÂ¢ÉÂèòÈáè')
  }

  // Ê£ÄÊü•APIÂØÜÈí•Ê†ºÂºè
  const apiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY
  if (apiKey && !apiKey.startsWith('AIza')) {
    recommendations.push('APIÂØÜÈí•Ê†ºÂºèÂèØËÉΩ‰∏çÊ≠£Á°ÆÔºåÂ∫îËØ•‰ª•"AIza"ÂºÄÂ§¥')
  }

  // Ê£ÄÊü•È°πÁõÆIDÊ†ºÂºè
  const projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID
  if (projectId && projectId === 'demo-project') {
    recommendations.push('È°πÁõÆID‰ªçÁÑ∂ÊòØÊºîÁ§∫ÂÄºÔºåËØ∑‰ΩøÁî®ÁúüÂÆûÁöÑFirebaseÈ°πÁõÆID')
  }

  // Ê£ÄÊü•ËÆ§ËØÅÂüüÂêçÊ†ºÂºè
  const authDomain = process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN
  if (authDomain && !authDomain.includes('firebaseapp.com')) {
    recommendations.push('ËÆ§ËØÅÂüüÂêçÊ†ºÂºèÂèØËÉΩ‰∏çÊ≠£Á°ÆÔºåÂ∫îËØ•‰ª•".firebaseapp.com"ÁªìÂ∞æ')
  }

  const isConfigValid = missingVars.length === 0

  return {
    isConfigValid,
    missingVars,
    configValues,
    recommendations
  }
}

export function logFirebaseConfig(): void {
  const diagnostics = diagnoseFirebaseConfig()
  
  console.group('üî• FirebaseÈÖçÁΩÆËØäÊñ≠')
  console.log('ÈÖçÁΩÆÁä∂ÊÄÅ:', diagnostics.isConfigValid ? '‚úÖ ÊúâÊïà' : '‚ùå Êó†Êïà')
  
  if (diagnostics.missingVars.length > 0) {
    console.warn('Áº∫Â§±ÁöÑÁéØÂ¢ÉÂèòÈáè:', diagnostics.missingVars)
  }
  
  console.log('ÈÖçÁΩÆÂÄº:')
  Object.entries(diagnostics.configValues).forEach(([key, value]) => {
    if (key.includes('API_KEY') || key.includes('APP_ID')) {
      console.log(`  ${key}: ${value ? `${value.substring(0, 10)}...` : 'Êú™ËÆæÁΩÆ'}`)
    } else {
      console.log(`  ${key}: ${value || 'Êú™ËÆæÁΩÆ'}`)
    }
  })
  
  if (diagnostics.recommendations.length > 0) {
    console.log('Âª∫ËÆÆ:')
    diagnostics.recommendations.forEach((rec, index) => {
      console.log(`  ${index + 1}. ${rec}`)
    })
  }
  
  console.groupEnd()
}

// Âú®ÂºÄÂèëÁéØÂ¢É‰∏≠Ëá™Âä®ËøêË°åËØäÊñ≠
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
  // Âª∂ËøüÊâßË°åÔºåÁ°Æ‰øùÁéØÂ¢ÉÂèòÈáèÂ∑≤Âä†ËΩΩ
  setTimeout(() => {
    logFirebaseConfig()
  }, 1000)
}
